{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMergeRefs = void 0;\nvar tslib_1 = require(\"tslib\");\nvar React = tslib_1.__importStar(require(\"react\"));\nvar assignRef_1 = require(\"./assignRef\");\nvar useRef_1 = require(\"./useRef\");\nvar currentValues = new WeakMap();\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nfunction useMergeRefs(refs, defaultValue) {\n  var callbackRef = (0, useRef_1.useCallbackRef)(defaultValue || null, function (newValue) {\n    return refs.forEach(function (ref) {\n      return (0, assignRef_1.assignRef)(ref, newValue);\n    });\n  });\n  // handle refs changes - added or removed\n  React.useLayoutEffect(function () {\n    var oldValue = currentValues.get(callbackRef);\n    if (oldValue) {\n      var prevRefs_1 = new Set(oldValue);\n      var nextRefs_1 = new Set(refs);\n      var current_1 = callbackRef.current;\n      prevRefs_1.forEach(function (ref) {\n        if (!nextRefs_1.has(ref)) {\n          (0, assignRef_1.assignRef)(ref, null);\n        }\n      });\n      nextRefs_1.forEach(function (ref) {\n        if (!prevRefs_1.has(ref)) {\n          (0, assignRef_1.assignRef)(ref, current_1);\n        }\n      });\n    }\n    currentValues.set(callbackRef, refs);\n  }, [refs]);\n  return callbackRef;\n}\nexports.useMergeRefs = useMergeRefs;","map":{"version":3,"names":["Object","defineProperty","exports","value","useMergeRefs","tslib_1","require","React","__importStar","assignRef_1","useRef_1","currentValues","WeakMap","refs","defaultValue","callbackRef","useCallbackRef","newValue","forEach","ref","assignRef","useLayoutEffect","oldValue","get","prevRefs_1","Set","nextRefs_1","current_1","current","has","set"],"sources":["/home/shawen/Code/faq-accordion/accordion/node_modules/use-callback-ref/dist/es5/useMergeRef.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useMergeRefs = void 0;\nvar tslib_1 = require(\"tslib\");\nvar React = tslib_1.__importStar(require(\"react\"));\nvar assignRef_1 = require(\"./assignRef\");\nvar useRef_1 = require(\"./useRef\");\nvar currentValues = new WeakMap();\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nfunction useMergeRefs(refs, defaultValue) {\n    var callbackRef = (0, useRef_1.useCallbackRef)(defaultValue || null, function (newValue) {\n        return refs.forEach(function (ref) { return (0, assignRef_1.assignRef)(ref, newValue); });\n    });\n    // handle refs changes - added or removed\n    React.useLayoutEffect(function () {\n        var oldValue = currentValues.get(callbackRef);\n        if (oldValue) {\n            var prevRefs_1 = new Set(oldValue);\n            var nextRefs_1 = new Set(refs);\n            var current_1 = callbackRef.current;\n            prevRefs_1.forEach(function (ref) {\n                if (!nextRefs_1.has(ref)) {\n                    (0, assignRef_1.assignRef)(ref, null);\n                }\n            });\n            nextRefs_1.forEach(function (ref) {\n                if (!prevRefs_1.has(ref)) {\n                    (0, assignRef_1.assignRef)(ref, current_1);\n                }\n            });\n        }\n        currentValues.set(callbackRef, refs);\n    }, [refs]);\n    return callbackRef;\n}\nexports.useMergeRefs = useMergeRefs;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,IAAIC,KAAK,GAAGF,OAAO,CAACG,YAAY,CAACF,OAAO,CAAC,OAAO,CAAC,CAAC;AAClD,IAAIG,WAAW,GAAGH,OAAO,CAAC,aAAa,CAAC;AACxC,IAAII,QAAQ,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAClC,IAAIK,aAAa,GAAG,IAAIC,OAAO,CAAC,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,YAAYA,CAACS,IAAI,EAAEC,YAAY,EAAE;EACtC,IAAIC,WAAW,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAACM,cAAc,EAAEF,YAAY,IAAI,IAAI,EAAE,UAAUG,QAAQ,EAAE;IACrF,OAAOJ,IAAI,CAACK,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAO,CAAC,CAAC,EAAEV,WAAW,CAACW,SAAS,EAAED,GAAG,EAAEF,QAAQ,CAAC;IAAE,CAAC,CAAC;EAC7F,CAAC,CAAC;EACF;EACAV,KAAK,CAACc,eAAe,CAAC,YAAY;IAC9B,IAAIC,QAAQ,GAAGX,aAAa,CAACY,GAAG,CAACR,WAAW,CAAC;IAC7C,IAAIO,QAAQ,EAAE;MACV,IAAIE,UAAU,GAAG,IAAIC,GAAG,CAACH,QAAQ,CAAC;MAClC,IAAII,UAAU,GAAG,IAAID,GAAG,CAACZ,IAAI,CAAC;MAC9B,IAAIc,SAAS,GAAGZ,WAAW,CAACa,OAAO;MACnCJ,UAAU,CAACN,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC9B,IAAI,CAACO,UAAU,CAACG,GAAG,CAACV,GAAG,CAAC,EAAE;UACtB,CAAC,CAAC,EAAEV,WAAW,CAACW,SAAS,EAAED,GAAG,EAAE,IAAI,CAAC;QACzC;MACJ,CAAC,CAAC;MACFO,UAAU,CAACR,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC9B,IAAI,CAACK,UAAU,CAACK,GAAG,CAACV,GAAG,CAAC,EAAE;UACtB,CAAC,CAAC,EAAEV,WAAW,CAACW,SAAS,EAAED,GAAG,EAAEQ,SAAS,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN;IACAhB,aAAa,CAACmB,GAAG,CAACf,WAAW,EAAEF,IAAI,CAAC;EACxC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,OAAOE,WAAW;AACtB;AACAb,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}